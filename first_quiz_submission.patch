diff --git a/part1/pets_db.py b/part1/pets_db.py
index 03355e1..051e2bf 100644
--- a/part1/pets_db.py
+++ b/part1/pets_db.py
@@ -1,5 +1,8 @@
 import sqlite3
 
+
+print("Conectandoooo")
+
 TABLE_SCHEMA = """
     CREATE TABLE animals (
       animal_id integer,
@@ -63,6 +66,7 @@ def create_db():
   drop_db()
 
   with get_connection() as con:
+  
     con.executescript(TABLE_SCHEMA)
     con.executemany("INSERT INTO animals VALUES(?, ?, ?, ?)", ANIMALS)
     con.executemany("INSERT INTO people VALUES(?, ?, ?, ?)", PEOPLE)
diff --git a/part1/question1.py b/part1/question1.py
index 5c99fdb..24e1b74 100644
--- a/part1/question1.py
+++ b/part1/question1.py
@@ -16,20 +16,30 @@
 def get_city_temperature(city):
    if city == "Quito":
       return 22
-   if city == "Sao Paulo":
+   elif city == "Sao Paulo":
       return 17
-   if city == "San Francisco":
+   elif city == "San Francisco":
       return 16
+   elif city == "New York":
+      return 14
+   else:
+      return 0
 
 def get_city_weather(city):
-
   sky_condition = None
+  if  isinstance(city, str):
+   if city == "Sao Paulo":
+      sky_condition = "cloudy"
+   elif city == "New York":
+      sky_condition = "rainy"
+   elif city == "Quito":
+      sky_condition = "sunny"
+   elif city == "San Francisco":
+      sky_condition = "No weather"
+   else:
+      sky_condition = "No weather"
+   temperature = get_city_temperature(city)
 
-  if city == "Sao Paulo":
-     sky_condition = "cloudy"
-  elif city == "New York":
-     sky_condition = "rainy"
-
-  temperature = get_city_temperature(city)
-
-  return str(temperature) + " degrees and " + sky_condition
\ No newline at end of file
+   return str(temperature) + " degrees and " + sky_condition
+  else:
+   return "Por favor ingrese el nombre de una cuidad"
diff --git a/part1/question1_test.py b/part1/question1_test.py
index 6bddae0..d8c1306 100644
--- a/part1/question1_test.py
+++ b/part1/question1_test.py
@@ -5,3 +5,11 @@ def test_get_city_weather():
   assert get_city_weather("Quito") == "22 degrees and sunny"
 
   assert get_city_weather("New York") == "14 degrees and rainy"
+
+  assert get_city_weather("San Francisco") == "16 degrees and No weather"
+
+  assert get_city_weather("Sao Paulo") == "17 degrees and cloudy"
+
+  assert get_city_weather("Sin lugar") == "0 degrees and No weather"
+  
+  assert get_city_weather(1.128130123) == "Por favor ingrese el nombre de una cuidad"
\ No newline at end of file
diff --git a/part1/question2.py b/part1/question2.py
index 34a9b01..f052830 100644
--- a/part1/question2.py
+++ b/part1/question2.py
@@ -15,7 +15,14 @@
 # it. As always, there is a test suite that checks the result. It is in 
 # `question2_test.py.`
 
-swapper = None
+def swapper(tuple):
+  if(len(tuple) == 2):
+   return (tuple[1],tuple[0])
+  else:
+    return "Por favor ingrese una tupla de dos valores"
 
 def run_swapper(list_of_tuples):
-  return list(map(swapper, list_of_tuples))
\ No newline at end of file
+  return list(map(swapper, list_of_tuples))
+
+
+print(run_swapper([("a","b"),("c","d"),["adsad","dsa","sda"]]))
diff --git a/part1/question3.py b/part1/question3.py
index 04fab99..8477ed7 100644
--- a/part1/question3.py
+++ b/part1/question3.py
@@ -27,18 +27,57 @@
 
 # This function should return an oven instance!
 def make_oven():
-  None
+  return Oven()
 
 def alchemy_combine(oven, ingredients, temperature):
   
   for item in ingredients:
     oven.add(item)
-
   if temperature < 0:
     oven.freeze()
   elif temperature >= 100:
     oven.boil()
   else:
     oven.wait()
+  return oven.get_output()
+
+
+class Oven:
+  
+   def __init__(self):
+        # Declarar una lista como atributo de la clase
+        self.mis_items = []
+        self.cooking = ""
+
+   def add(self,item):
+      self.mis_items.append(item)
+
+   def mostrar_lista(self):
+      print(self.mis_items)
+   
+   def boil(self):
+      self.cooking = "Hervir"
+     
+   def freeze(self):
+    self.cooking = "Congelar"
+   
+   def wait(self):
+      self.cooking = "Esperando"
+   
+
+   def get_output(self):
+      if  {"lead", "mercury"}.issubset(set(self.mis_items)) and self.cooking == "Hervir":
+         return "gold"
+      elif {"water", "air"}.issubset(set(self.mis_items)) and self.cooking == "Congelar":
+         return "snow"
+      elif {"cheese", "dough", "tomato"}.issubset(set(self.mis_items)) and self.cooking == "Hervir":
+         return "pizza"
+      elif  {"coco", "water"}.issubset(set(self.mis_items)) and self.cooking == "Esperando":
+         return "coconut water"
+      else:
+         return "Receta no conocidad"
+
+
+
+   
 
-  return oven.get_output()
\ No newline at end of file
diff --git a/part1/question3_test.py b/part1/question3_test.py
index 6cb6c89..dcdafba 100644
--- a/part1/question3_test.py
+++ b/part1/question3_test.py
@@ -1,3 +1,5 @@
+from question3 import alchemy_combine,make_oven 
+
 def test_alchemy_combine():
 
   assert alchemy_combine(
@@ -16,4 +18,18 @@ def test_alchemy_combine():
     make_oven(),
     ["cheese", "dough", "tomato"],
     150
-  ) == "pizza"
\ No newline at end of file
+  ) == "pizza"
+
+  assert alchemy_combine(
+    make_oven(),
+    ["coco", "water"],
+    70
+  ) == "coconut water"
+
+
+assert alchemy_combine(
+    make_oven(),
+    ["coco", "shoes"],
+    70
+  ) == "Receta no conocidad"
+
diff --git a/part1/question4.py b/part1/question4.py
index 1e1b2bf..6cbd1a8 100644
--- a/part1/question4.py
+++ b/part1/question4.py
@@ -23,9 +23,10 @@ import pets_db
 # The output should be a list of tuples in the format: (<pet name>, <species>, <age>)
 
 sql_pets_owned_by_nobody = """
-
-Your SQL here.
-
+select a.name, a.species, a.age 
+from animals a
+LEFT JOIN PEOPLE_ANIMALS p ON p.pet_id = a.animal_id
+WHERE p.owner_id IS NULL;
 """
 
 # Part 4.B:
@@ -33,9 +34,11 @@ Your SQL here.
 # The output should be an integer.
 
 sql_pets_older_than_owner = """
-
-Your SQL here.
-
+select COUNT(*) from animals a, people p,
+people_animals pa
+where a.animal_id = pa.pet_id
+and p.person_id = pa.owner_id
+and a.age > p.age
 """
 
 # Part 4.C: BONUS CHALLENGE! 
@@ -43,6 +46,15 @@ Your SQL here.
 # The output should be a list of tuples in the format: (<person name>, <pet name>, <species>)
 sql_only_owned_by_bessie = """ 
 
-Your SQL here.
+select p.name, a.name, a.species from animals a,
+people p, people_animals pa
+where a.animal_id = pa.pet_id
+and p.person_id = pa.owner_id
+and lower(p.name) LIKE lower('Bessie')
+AND NOT EXISTS (
+    SELECT 1
+    FROM people_animals pa2
+    WHERE pa2.pet_id = pa.pet_id
+    AND pa2.owner_id <> pa.owner_id)
 
 """
\ No newline at end of file
diff --git a/part1/question4_test.py b/part1/question4_test.py
index b01006c..6ece20d 100644
--- a/part1/question4_test.py
+++ b/part1/question4_test.py
@@ -6,17 +6,20 @@ def test_question4_pets_older_than_owner():
 
   with pets_db.get_connection() as con:
     res = con.execute(sql_pets_older_than_owner)
+  
     result = res.fetchone()
 
   assert len(result) == 1
   assert result[0] == 2
 
+
 def test_question4_pets_owned_by_nobody():
   pets_db.create_db()
 
   with pets_db.get_connection() as con:
     res = con.execute(sql_pets_owned_by_nobody)
     rows = res.fetchall()
+  
 
   rows.sort()
 
@@ -29,7 +32,9 @@ def test_question4_only_owned_by_bessie():
 
   with pets_db.get_connection() as con:
     res = con.execute(sql_only_owned_by_bessie)
+    
     rows = res.fetchall()
+    print(rows)
 
   rows.sort()
 
diff --git a/part1/question5.py b/part1/question5.py
index f76654f..af9f30e 100644
--- a/part1/question5.py
+++ b/part1/question5.py
@@ -20,7 +20,11 @@
 
 sql_create_favorite_foods = """
 
-Your SQL here.
+ CREATE TABLE favorite_foods (
+      food_id integer,
+      name text      ,
+      vegetarian integer
+    )
 
 """
 
@@ -30,7 +34,9 @@ Your SQL here.
 
 sql_alter_tables_with_favorite_food = """
 
-Your SQL here.
+    ALTER TABLE animals ADD favorite_food_id integer;
+    
+    ALTER TABLE people ADD favorite_food_id integer;
 
 """
 
@@ -40,6 +46,8 @@ Your SQL here.
 
 sql_select_all_vegetarian_pets = """
 
-Your SQL here.
+    select a.name, fd.name from animals a, favorite_foods fd
+    where a.favorite_food_id = fd.food_id
+    AND fd.vegetarian = 1
 
 """
\ No newline at end of file
diff --git a/part1/question5_test.py b/part1/question5_test.py
index b5d932e..4e333f0 100644
--- a/part1/question5_test.py
+++ b/part1/question5_test.py
@@ -32,7 +32,7 @@ def create_favorite_foods(con):
   con.execute(sql_create_favorite_foods)
 
 def alter_people_animals_food(con):
-  con.executescript(sql_alter_tables_with_favorite_food);
+  con.executescript(sql_alter_tables_with_favorite_food)
 
 def update_people_animals_food(con):
   con.executemany("UPDATE people SET favorite_food_id = ? WHERE name = ?", PEOPLE_FOOD)
diff --git a/part1/quiz_pets b/part1/quiz_pets
new file mode 100644
index 0000000..a3b63b6
Binary files /dev/null and b/part1/quiz_pets differ
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java
new file mode 100644
index 0000000..d9394d0
--- /dev/null
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/DrinkImpl.java
@@ -0,0 +1,27 @@
+package org.velezreyes.quiz.question6;
+
+public class DrinkImpl implements Drink{
+
+    private String name;
+
+    public DrinkImpl(String name){
+        this.name = name;
+    }
+
+    @Override
+    public String getName() {
+       return this.name;
+    }
+
+    @Override
+    public boolean isFizzy() {
+      if(this.name.equals("ScottCola") || this.name.equals("BessieBooze")){
+        return true;
+      }else if(this.name.equals("KarenTea")){
+        return false;
+      }else{
+        return true;
+      }
+    }
+    
+}
diff --git a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
index 85742c4..9a36f2a 100644
--- a/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
+++ b/part2/src/main/java/org/velezreyes/quiz/question6/VendingMachineImpl.java
@@ -1,9 +1,51 @@
 package org.velezreyes.quiz.question6;
 
-public class VendingMachineImpl {
+public class VendingMachineImpl implements VendingMachine{
+
+  private int coins;
+
+  public VendingMachineImpl(){
+    System.err.println(coins);
+  }
 
   public static VendingMachine getInstance() {
     // Fix me!
-    return null;
+    return new VendingMachineImpl();
+  }
+
+  @Override
+  public void insertQuarter() {
+    ++this.coins;
+  }
+
+  public int getCoins(){
+    return this.coins;
+  }  
+  
+  public void restCoins(int lessCoins){
+    this.coins =- lessCoins;
+  }
+
+
+  @Override
+  public Drink pressButton(String name) throws NotEnoughMoneyException, UnknownDrinkException {
+    if(name.equals("ScottCola")){
+      if(coins >= 3){
+        restCoins(coins);
+        System.out.println("Cambio: " + coins);
+        return new DrinkImpl("ScottCola");
+      }
+      throw new NotEnoughMoneyException();
+    }else if(name.equals("KarenTea")){
+       if(coins >= 4){
+        restCoins(coins);
+        System.out.println("Cambio: " + coins);
+        return new DrinkImpl("KarenTea");
+      }
+      throw new NotEnoughMoneyException();
+
+    }
+    throw new UnknownDrinkException();
+  
   }
 }
